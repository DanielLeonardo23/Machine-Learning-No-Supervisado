
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score

st.set_page_config(page_title="An치lisis Interactivo de Clusters de Usuarios", layout="wide")

# T칤tulo principal
st.title("游댌 An치lisis Interactivo de Clusters de Usuarios en Redes Sociales")
st.markdown("""
Este sistema agrupa usuarios en funci칩n de su comportamiento en redes sociales 
utilizando **K-Means clustering**. Puedes elegir cu치ntos grupos formar y visualizar:

- El **gr치fico de agrupamiento (PCA)**  
- Las **estad칤sticas promedio** por grupo  
- La **distribuci칩n de emociones** (si aplica)  
- El **silhouette score**, una m칠trica que mide la calidad del agrupamiento
""")

# Cargar datos originales
df = pd.read_csv("train.csv")

# Seleccionar caracter칤sticas num칠ricas
features = [
    'Daily_Usage_Time (minutes)', 'Posts_Per_Day', 'Likes_Received_Per_Day',
    'Comments_Received_Per_Day', 'Messages_Sent_Per_Day'
]
X = df[features]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Selecci칩n de K
st.sidebar.header("Configuraci칩n de Agrupamiento")
k = st.sidebar.slider("Selecciona el n칰mero de clusters (K)", min_value=2, max_value=10, value=4)

# Aplicar K-Means
kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
clusters = kmeans.fit_predict(X_scaled)
df['Cluster'] = clusters

# Calcular PCA para visualizaci칩n
pca = PCA(n_components=2)
components = pca.fit_transform(X_scaled)
df['PCA1'] = components[:, 0]
df['PCA2'] = components[:, 1]

# Calcular silhouette score
sil_score = silhouette_score(X_scaled, clusters)

# Mostrar el silhouette score
st.sidebar.markdown(f"**Silhouette Score:** {sil_score:.4f}")
st.sidebar.markdown("Valores m치s cercanos a **1.0** indican agrupamientos m치s definidos.")

# Gr치fico PCA
st.subheader("游늳 Visualizaci칩n de Clusters en 2D (PCA)")
fig, ax = plt.subplots()
sns.scatterplot(data=df, x="PCA1", y="PCA2", hue="Cluster", palette="Set2", ax=ax)
plt.title(f"Visualizaci칩n PCA con K={k}")
st.pyplot(fig)

# Selecci칩n de cluster espec칤fico
st.subheader("游늷 An치lisis por Cluster")
selected_cluster = st.selectbox("Selecciona un cluster para analizar:", sorted(df['Cluster'].unique()))
cluster_data = df[df['Cluster'] == selected_cluster]

# M칠tricas de comportamiento promedio
st.markdown(f"### 游늵 Estad칤sticas promedio del Cluster {selected_cluster}")
means = cluster_data[features].mean().sort_values()
fig2, ax2 = plt.subplots()
means.plot(kind='barh', ax=ax2, color='skyblue')
ax2.set_xlabel("Promedio")
ax2.set_title("Promedios por Variable")
st.pyplot(fig2)

# Distribuci칩n de emociones (si aplica)
if 'Dominant_Emotion' in cluster_data.columns:
    st.markdown("### 游땎 Distribuci칩n de Emociones")
    fig3, ax3 = plt.subplots()
    sns.countplot(data=cluster_data, y='Dominant_Emotion', order=cluster_data['Dominant_Emotion'].value_counts().index, palette='pastel', ax=ax3)
    ax3.set_title("Frecuencia de Emociones por Cluster")
    st.pyplot(fig3)

# Mostrar tabla de usuarios en el cluster
st.markdown(f"### 游늶 Detalles de Usuarios en el Cluster {selected_cluster}")
st.dataframe(cluster_data.reset_index(drop=True))
